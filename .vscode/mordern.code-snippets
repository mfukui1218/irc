{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"C++ Class Skeleton from Filename": {
        "prefix": "classhpp",
        "description": "Create C++ class header based on filename",
        "body": [
			"#ifndef ${TM_FILENAME_BASE}_H",
			"#define ${TM_FILENAME_BASE}_H",
			"",
            "class ${TM_FILENAME_BASE}",
            "{",
            "    private:",
            "    protected:",
            "    public:",
            "        ${TM_FILENAME_BASE}();",
            "        ${TM_FILENAME_BASE}(const ${TM_FILENAME_BASE} &other);",
            "        virtual ~${TM_FILENAME_BASE}();",
            "        ${TM_FILENAME_BASE} &operator=(const ${TM_FILENAME_BASE} &rhs);",
            "};",
			"",
			"#endif // ${TM_FILENAME_BASE}_H"
        ]
    },
	"C++ Class Implementation from Filename": {
        "prefix": "classcpp",
        "description": "Create C++ class implementation skeleton based on filename",
        "body": [
            "#include \"${TM_FILENAME_BASE}.hpp\"",
            "",
            "${TM_FILENAME_BASE}::${TM_FILENAME_BASE}()",
            "{",
            "}",
            "",
            "${TM_FILENAME_BASE}::${TM_FILENAME_BASE}(const ${TM_FILENAME_BASE} &other)",
            "{",
            "    // copy constructor",
            "}",
            "",
            "${TM_FILENAME_BASE}::~${TM_FILENAME_BASE}()",
            "{",
            "}",
            "",
            "${TM_FILENAME_BASE} ${TM_FILENAME_BASE}::operator=(const ${TM_FILENAME_BASE} &rhs)",
            "{",
            "    if (this != &rhs) {",
            "        // assignment logic",
            "    }",
            "    return *this;",
            "}"
        ]
    },
	"C++ Interface Header from Filename": {
        "prefix": "classinterface",
        "description": "Create C++ pure virtual class header based on filename",
        "body": [
            "#pragma once",
            "",
            "class ${TM_FILENAME_BASE}",
            "{",
            "    public:",
            "        virtual ~${TM_FILENAME_BASE}() {}",
            "};"
        ]
    }
}
